{"version":3,"sources":["../../src/simple-tiny-test-framework.js"],"names":[],"mappings":";;;;;;;;;;;;;;IACM,MAAM;AAEA,UAFN,MAAM,CAEC,KAAK,EAAE;wBAFd,MAAM;;;;;;;AAQV,MAAI,CAAC,MAAM,GAAG,KAAK,CAAC;;;;;;;AAOpB,MAAI,CAAC,SAAS,GAAG,KAAK,CAAC;EACvB;;;;;;;;;;;cAhBI,MAAM;;;;;;;;;;SAkCT,YAAC,QAAQ,EAAE;AACZ,OAAG,OAAO,QAAQ,KAAK,UAAU,EAAE;AAClC,QAAM,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7C,WAAO,IAAI,CAAC,SAAS,GAAG,CAAC,cAAc,GAAG,cAAc,CAAC;IACzD;;AAED,SAAM,IAAI,KAAK,gDAA8C,OAAO,QAAQ,eAAY,CAAC;GACzF;;;OAnBM,eAAG;AACT,OAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;AACjC,UAAO,IAAI,CAAC;GACZ;;;QAzBI,MAAM;;;AA+CL,SAAS,MAAM,CAAC,KAAK,EAAE;AAC7B,QAAO,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;CACzB;;;;;;AAKM,SAAS,EAAE,CAAE,aAAa,EAAE;AAClC,QAAO,UAAS,SAAS,EAAE;AAC1B,SAAO,SAAS,KAAK,aAAa,CAAC;EACnC,CAAA;CACD;;;;;;AAKM,SAAS,aAAa,CAAE,aAAa,EAAE;AAC7C,QAAO,UAAS,SAAS,EAAE;AAC1B,SAAO,SAAS,GAAG,aAAa,CAAC;EACjC,CAAA;CACD","file":"simple-tiny-test-framework.js","sourcesContent":["\nclass Expect {\n\n\tconstructor(value) {\n\t\t/**\n\t\t * Base value\n\t\t * @type {*}\n\t\t * @private\n\t\t */\n\t\tthis._value = value;\n\n\t\t/**\n\t\t * Is Expression Negated\n\t\t * @type {boolean}\n\t\t * @private\n\t\t */\n\t\tthis._isNegate = false;\n\t}\n\n\t/**\n\t * Negates the expression\n\t * @returns {Expect}\n\t */\n\tget not() {\n\t\tthis._isNegate = !this._isNegate;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Expects some operator (eq, beGreaterThan) to be called and a result of this call to be given as an argument\n\t * @see {@link eq}\n\t * @see {@link beGreaterThan}\n\t * @param {function(baseValue:*) : boolean} callback\n\t * @returns {boolean}\n\t */\n\tto(callback) {\n\t\tif(typeof callback === \"function\") {\n\t\t\tconst operatorResult = callback(this._value);\n\t\t\treturn this._isNegate ? !operatorResult : operatorResult;\n\t\t}\n\n\t\tthrow new Error(`Expect#to: argument should be a function, ${typeof callback} is given`);\n\t}\n}\n\n/**\n * @param {*} value base value\n */\nexport function expect(value) {\n\treturn new Expect(value);\n}\n\n/**\n * @param {*} operatorValue operatorValue to check for equality\n */\nexport function eq (operatorValue) {\n\treturn function(baseValue) {\n\t\treturn baseValue === operatorValue;\n\t}\n}\n\n/**\n * @param {*} operatorValue value to check for being greater\n */\nexport function beGreaterThan (operatorValue) {\n\treturn function(baseValue) {\n\t\treturn baseValue > operatorValue;\n\t}\n}\n\n"]}